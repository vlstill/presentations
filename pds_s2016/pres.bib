@Inbook{LazyCAV14,
    author="Inverso, Omar
        and Tomasco, Ermenegildo
        and Fischer, Bernd
        and La Torre, Salvatore
        and Parlato, Gennaro",
    editor="Biere, Armin
        and Bloem, Roderick",
    chapter="Bounded Model Checking of Multi-threaded C Programs via Lazy
        Sequentialization",
    title="Computer Aided Verification: 26th International Conference, CAV 2014,
    Held as Part of the Vienna Summer of Logic, VSL 2014, Vienna, Austria, July
        18-22, 2014. Proceedings",
    year="2014",
    publisher="Springer International Publishing",
    address="Cham",
    pages="585--602",
    isbn="978-3-319-08867-9",
    doi="10.1007/978-3-319-08867-9_39",
    url="http://dx.doi.org/10.1007/978-3-319-08867-9_39"
}

@online{Lazy16,
    author = {Omar Inverso and Truc L. Nguyen and Ermenegildo Tomasco and Bernd Fischer 2 and Salvatore La Torre and Gennaro Parlato},
    title = {{Lazy-CSeq 1.0 (Competition Contribution), rejected, \url{http://eprints.soton.ac.uk/387010/}}}
}


@inproceedings{MUTACAS15,
       booktitle = {21st International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS)},
           month = {April},
           title = {Verifying concurrent programs by memory unwinding},
          author = {Ermenegildo Tomasco and Omar Inverso and Bernd Fischer and Salvatore La Torre and Gennaro Parlato},
            year = {2015},
             url = {http://eprints.soton.ac.uk/370322/},
        abstract = {We describe a new sequentialization-based approach to the symbolic verification of multi-threaded programs with shared memory and dynamic thread creation. Its main novelty is the idea of memory unwinding, i.e., an explicit representation of the sequence of write operations into the shared memory. For the verification, we nondeterministically guess this unwinding and then simulate the behavior of the program according to any scheduling that respects this guess. This approach is complementary to other sequentializations and explores an orthogonal dimension, i.e., the number of write operations. It also simplifies the implementation of several important optimizations, in particular the targeted exposure of individual writes. We implemented this approach as code-to-code transformation from multi-threaded into nondeterministic sequential programs, which allows the reuse of sequential verification tools. Experiments show that our approach is very promising: it found all errors in the concurrency category of SV-COMP15.}
}

@inproceedings{MUSVC16,
    booktitle = {22st International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS), to appear},
    title = {{MU-CSeq 0.4: Individual Memory Location Unwindings (Competition Contribution)}},
    author = {Ermenegildo Tomasco and Truc L. Nguyen and Omar Inverso and
              Bernd Fischer and Salvatore La Torre and Gennaro Parlato},
    year = 2016
}
